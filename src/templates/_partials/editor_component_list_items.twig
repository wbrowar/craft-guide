{# /**
 * Guide plugin for Craft CMS
 *
 * @author    Will Browar
 * @copyright Copyright (c) 2021 Will Browar
 * @link      https://wbrowar.com
 * @package   Guide
 * @since     5.0.0
 */ #}

{% set components = [] %}
{% set guides = [] %}
{% set images = [] %}
{% set snippets = [] %}


{# Components #}
{% set contentCode %}{% verbatim %}{{ craft.guide.component('audio', { src: 'REPLACE_URL' }) }}{% endverbatim %}{% endset %}
{% set components = components|merge([{
  title: 'Audio'|t('guide'),
  contentCode,
  group: 'components',
  summary: '<p>Play audio in the browserâ€™s audio player.</p>'|t('guide'),
  props: {
    src: 'A absolute URL to your audio file.'|t('guide'),
  },
}]) %}

{% set contentCode %}{% verbatim %}{{ craft.guide.component('button', { label: 'REPLACE_LABEL', url: url('REPLACE_URL') }) }}{% endverbatim %}{% endset %}
{% set components = components|merge([{
  title: 'Button'|t('guide'),
  contentCode,
  group: 'components',
  summary: '<p>A call-to-action link that looks like a button.</p>'|t('guide'),
  props: {
    label: 'The label text for the button.'|t('guide'),
    href: 'The URL that the button goes to when clicked.'|t('guide'),
  },
}]) %}

{% set contentCode %}{% verbatim %}{% set detailsContent %}{% apply markdown('gfm') %}
REPLACE_TEXT
{% endapply %}{% endset %}
{{ craft.guide.component('details', { content: detailsContent }) }}{% endverbatim %}{% endset %}
{% set components = components|merge([{
  title: 'Details'|t('guide'),
  contentCode,
  group: 'components',
  summary: '<p>Hide extra information within a details element.</p>'|t('guide'),
  props: {
    content: 'Text displayed when the details element is opened.'|t('guide'),
    open: 'A boolean that toggles the details element to be opened or closed. Defaults to `false`'|t('guide'),
    summary: 'The label of the button that toggles the details element open and close.'|t('guide'),
  },
}]) %}

{% set contentCode %}{% verbatim %}{{ craft.guide.component('guide-button', { slug: 'REPLACE_SLUG' }) }}{% endverbatim %}{% endset %}
{% set components = components|merge([{
  title: 'Guide Button'|t('guide'),
  contentCode,
  group: 'components',
  summary: '<p>A button that opens up a guide in a slideout.</p>'|t('guide'),
  props: {
    label: 'The label of the button.'|t('guide'),
    slug: 'The slug of the guide that is displayed in the slideout.'|t('guide'),
  },
}]) %}

{% set contentCode %}{% verbatim %}{{ craft.guide.component('image', { modal: true, url: 'REPLACE_URL' }) }}{% endverbatim %}{% endset %}
{% set components = components|merge([{
  title: 'Image'|t('guide'),
  contentCode,
  group: 'components',
  summary: '<p>Display an image or a screenshot from a URL.</p>'|t('guide'),
  props: {
    asset: 'An image asset uploaded to this Craft CMS project.'|t('guide'),
    modal: 'Enables a modal to show when the image is clicked.'|t('guide'),
    src: 'The URL of the image to be displayed.'|t('guide'),
  },
}]) %}

{% set contentCode %}{% verbatim %}{% apply markdown('gfm') %}

## Heading

Content

{% endapply %}{% endverbatim %}{% endset %}
{% set components = components|merge([{
  title: 'Markdown'|t('guide'),
  contentCode,
  group: 'components',
  summary: '<p>Use Craftâ€™s "markdown" Twig filter to render markdown content.</p>'|t('guide'),
}]) %}

{% set contentCode %}{% verbatim %}{{ craft.guide.component('table', {
  headers: ['REPLACE_TEXT', 'REPLACE_TEXT', 'REPLACE_TEXT'],
  rows: [
    ['REPLACE_TEXT', 'REPLACE_TEXT', 'REPLACE_TEXT'],
    ['REPLACE_TEXT', 'REPLACE_TEXT', 'REPLACE_TEXT'],
    ['REPLACE_TEXT', 'REPLACE_TEXT', 'REPLACE_TEXT'],
  ],
}) }}{% endverbatim %}{% endset %}
{% set components = components|merge([{
  title: 'Table'|t('guide'),
  contentCode,
  group: 'components',
  summary: '<p>A styled HTML table.</p>'|t('guide'),
  props: {
    headers: 'An array of table header cells.'|t('guide'),
    rows: 'An array of arrays that populate the table body.'|t('guide'),
    footers: 'An array of table footer cells.'|t('guide'),
  }
}]) %}

{% set contentCode %}{% verbatim %}{{ craft.guide.component('tip', { text: 'REPLACE_TEXT' }) }}{% endverbatim %}{% endset %}
{% set components = components|merge([{
  title: 'Tip'|t('guide'),
  contentCode,
  group: 'components',
  summary: '<p>Inform content authors in a way that stands out from surrounding text.</p>'|t('guide'),
  props: {
    message: 'Text displayed in the tip.'|t('guide'),
  },
}]) %}

{% set contentCode %}{% verbatim %}{{ craft.guide.var('clientName') }}{% endverbatim %}{% endset %}
{% set components = components|merge([{
  title: 'Variable Client Name'|t('guide'),
  contentCode,
  group: 'components',
  summary: '<p>Display the value of the <strong>Client Name</strong> variable.</p>'|t('guide'),
}]) %}

{% set contentCode %}{% verbatim %}{{ craft.guide.var('myCompanyName') }}{% endverbatim %}{% endset %}
{% set components = components|merge([{
  title: 'Variable My Company Name'|t('guide'),
  contentCode,
  group: 'components',
  summary: '<p>Display the value of the <strong>My Company Name</strong> variable.</p>'|t('guide'),
}]) %}

{% set contentCode %}{% verbatim %}{{ craft.guide.var('projectName') }}{% endverbatim %}{% endset %}
{% set components = components|merge([{
  title: 'Variable Project Name'|t('guide'),
  contentCode,
  group: 'components',
  summary: '<p>Display the value of the <strong>Project Name</strong> variable.</p>'|t('guide'),
}]) %}

{% set contentCode %}{% verbatim %}{{ craft.guide.component('video', { source: 'vimeo', videoId: 'REPLACE_VIDEO_ID' }) }}{% endverbatim %}{% endset %}
{% set components = components|merge([{
  title: 'Vimeo Video'|t('guide'),
  contentCode,
  group: 'components',
  summary: '<p>Play a Vimeo video in an iframe.</p>'|t('guide'),
  props: {
    source: 'Determine the video hosting serviceâ€™s embed code.'|t('guide'),
    videoId: 'The ID of the Vimeo video, found in the URL or embed code provided by Vimeo.'|t('guide'),
  },
  }]) %}

{% set contentCode %}{% verbatim %}{{ craft.guide.component('warning', { text: 'REPLACE_TEXT' }) }}{% endverbatim %}{% endset %}
{% set components = components|merge([{
  title: 'Warning'|t('guide'),
  contentCode,
  group: 'components',
  summary: '<p>Warn content authors about potential content issues.</p>'|t('guide'),
  props: {
    message: 'Text displayed in the warning.'|t('guide'),
  },
}]) %}

{% set contentCode %}{% verbatim %}{{ craft.guide.component('video', { source: 'youtube', videoId: 'REPLACE_VIDEO_ID' }) }}{% endverbatim %}{% endset %}
{% set components = components|merge([{
  title: 'YouTube Video'|t('guide'),
  contentCode,
  group: 'components',
  summary: '<p>Play a YouTube video in an iframe.</p>'|t('guide'),
  props: {
    source: 'Determine the video hosting serviceâ€™s embed code.'|t('guide'),
    videoId: 'The ID of the Vimeo video, found in the URL or embed code provided by YouTube.'|t('guide'),
  },
}]) %}


{# Guides #}
{% set guidesData = craft.guide.getAll() %}
{% for item in guidesData %}
  {% if item.id != guide.id %}
    {% set contentCode %}{% verbatim %}{{ craft.guide.include({ slug: '{% endverbatim %}{{ item.slug }}{% verbatim %}' }) }}{% endverbatim %}{% endset %}
    {% set guides = guides|merge([{
      title: item.title,
      contentCode,
      group: 'guides',
      summary: item.summary,
      props: {
        slug: 'The slug of the guide being included.'|t('guide'),
      },
    }]) %}
  {% endif %}
{% endfor %}


{# Images #}
{% if assetComponents|length %}
  {% set images = assetComponents %}
{% endif %}


{# Snippets #}
{% set contentCode %}{% verbatim %}{# VERSION START  For each version, make a copy of this block and place it at the top of this guide. #}
{% set version %}{% apply markdown('gfm') %}

<h2><span>1.0.0</span> Sep 27, 2024</h2>

### ðŸš€ Added

- Features that have been added.

### ðŸ”§ Changed

- Things that have changed.

### ðŸš§ Fixed

- Bugs that have been fixed.

### ðŸ”¥ Deleted

{% endapply %}{% endset %}
{% set versions = versions is defined ? versions|merge([version]) : [version] %}
{# VERSION END #}

{# -------------------------------------------------------------------------- #}

{# Display changelog versions Â Do not edit this part. #}

{% if guideDisplayArea == 'widget' %}
  <div class="version">
    {{ versions[0] }}
  </div>
{% else %}
  {% for version in versions %}
    <div class="version">
      {{ version }}
    </div>
  {% endfor %}
{% endif %}


{% if guideDisplayArea == 'widget' %}
  {{ craft.guide.component('button', { label: 'See all changes', url: url('guide/page/' ~ guide.slug) }) }}
{% endif %}{% endverbatim %}{% endset %}
{% set cssCode %}{% verbatim %}.guide-REPLACE_GUIDE_SLUG {
  & .version {
    & + .version {
      margin-block-start: 3rem;
    }
    & h2 span {
      font-size: 2rem;
    }
  }
}{% endverbatim %}{% endset %}
{% set snippets = snippets|merge([{
  title: 'Changelog'|t('guide'),
  cssCode,
  contentCode,
  group: 'snippets',
  summary: '<p>Display updates to your Craft project.</p>'|t('guide'),
}]) %}

{% set contentCode %}{% verbatim %}{# Set the type of element to be displayed. Options: assets, categories, entries, users #}
{% set elementType = 'entries' %}

{# If showing content stats for entries, specifcy the section; for assets, the volume, or for categories, the group. #}
{# Leave this as null to get all entries, assets, or category groups. #}
{% set subType = null %}

{# Set a label that sits under the total number. Leave this as blank to default to the element type. #}
{% set label = null %}

{% if elementType == 'assets' %}
  {% set labelDefault = 'Assets' %}
  {% set statuses = ['live'] %}
  {% set live = craft.assets.limit(null).volume(subType ?? null).status('live').count() %}
{% elseif elementType == 'categories' %}
  {% set labelDefault = 'Categories' %}
  {% set statuses = ['live', 'disabled'] %}
  {% set live = craft.categories.limit(null).group(subType ?? null).status('enabled').count() %}
  {% set disabled = craft.categories.limit(null).group(subType ?? null).status('disabled').count() %}
{% elseif elementType == 'entries' %}
  {% set labelDefault = 'Entries' %}
  {% set statuses = ['live', 'disabled', 'pending', 'expired'] %}
  {% set live = craft.entries.limit(null).section(subType ?? null).status('live').count() %}
  {% set disabled = craft.entries.limit(null).section(subType ?? null).status('disabled').count() %}
  {% set pending = craft.entries.limit(null).section(subType ?? null).status('pending').count() %}
  {% set expired = craft.entries.limit(null).section(subType ?? null).status('expired').count() %}
{% elseif elementType == 'users' %}
  {% set labelDefault = 'Users' %}
  {% set statuses = ['live', 'disabled'] %}
  {% set live = craft.users.limit(null).status('enabled').count() %}
  {% set disabled = craft.users.limit(null).status('disabled').count() %}
{% endif %}

<div class="guide-snippet-content-stats-header">
  <div><b>{{ live|default('') }}</b></div>
  <div>{{ label|default(labelDefault) }}</div>
</div>

<div class="guide-snippet-content-stats-body">
  {% if 'live' in statuses %}
    <div class="element small hasstatus" title="Live elements"><span class="status live"></span><span class="label"><span class="title">Live</span></span></div>
    <div><b>{{ live }}</b></div>
  {% endif %}

  {% if 'disabled' in statuses %}
    <div class="element small hasstatus" title="Disabled elements"><span class="status disabled"></span><span class="label"><span class="title">Disabled</span></span></div>
    <div><b>{{ disabled }}</b></div>
  {% endif %}

  {% if 'pending' in statuses %}
    <div class="element small hasstatus" title="Pending elements"><span class="status pending"></span><span class="label"><span class="title">Pending</span></span></div>
    <div><b>{{ pending }}</b></div>
  {% endif %}

  {% if 'expired' in statuses %}
    <div class="element small hasstatus" title="Expired elements"><span class="status expired"></span><span class="label"><span class="title">Expired</span></span></div>
    <div><b>{{ expired }}</b></div>
  {% endif %}
</div>{% endverbatim %}{% endset %}
{% set cssCode %}{% verbatim %}.guide {
    & .guide-snippet-content-stats-header {
        margin-inline: auto;
        text-align: center;

        & div:first-child {
            font-size: 5rem;
            line-height: .9em;
        }
        & div:last-child {
            font-size: 1rem;
        }
    }
    & .guide-snippet-content-stats-body {
        display: grid;
        grid-template-columns: max-content 1fr;
        align-items: center;
        gap: var(--l);
        margin-inline: auto;

        & .element + div {
            font-size: 1.7rem;
            text-align: right;
        }
    }
}{% endverbatim %}{% endset %}
{% set snippets = snippets|merge([{
  title: 'Content Stats'|t('guide'),
  contentCode,
  cssCode,
  group: 'snippets',
  summary: '<p>Show a total of entries that are currently published.</p>'|t('guide'),
}]) %}

{% set contentCode %}{% verbatim %}{# Set the asset volume you would like to check for images in. #}
{% set volume = null %}

{# Display a list of invalid images that are missing alt text. #}
{% cache %}
  {% set assets = craft.assets.volume(volume ?? null).hasAlt(false).kind('image').all() %}

  {% if assets|length %}
{% apply markdown('gfm') %}

These images are missing alt text.

{% endapply %}
    {% set rows = [] %}

    {% for asset in assets %}
      {% set cell1 %}
        {% if asset.kind == 'image' %}
          <a href="{{ asset.cpEditUrl }}" style="display: block; max-width: 300px" title="Edit image">{{ craft.guide.component('image', { url: asset.url }) }}</a>
        {% endif %}
      {% endset %}
      {% set cell2 %}<a href="{{ asset.cpEditUrl }}">{{ asset.title }}</a>{% endset %}
      {% set cell3 %}{{ asset.filename }}{% endset %}
      {% set row = [cell1, cell2, cell3] %}
      {% set rows = rows|merge([row]) %}
    {% endfor %}

    {{ craft.guide.component('table', {
      headers: ['Preview', 'Title', 'File name'],
      rows,
    }) }}
  {% else %}
{% apply markdown('gfm') %}

All images in this volume have alt values!

{% endapply %}
  {% endif %}
{% endcache %}{% endverbatim %}{% endset %}
{% set snippets = snippets|merge([{
  title: 'Images Missing Alt Text'|t('guide'),
  contentCode,
  group: 'snippets',
  summary: '<p>Find images where the <strong>alt</strong> field is empty.</p>'|t('guide'),
}]) %}

{% set contentCode %}{% verbatim %}{# Set the asset volume you would like to check for images in. #}
{% set volume = null %}

{# Display a list of invalid images that are missing focal points. #}
{% cache %}
  {% set assets = craft.assets.volume(volume ?? null).kind('image').all() %}

  {% if assets|length %}>
{% apply markdown('gfm') %}

These images are missing a focal point and might get cropped incorrectly.

{% endapply %}
    {% set rows = [] %}

    {% for asset in assets %}
      {% if not asset.hasFocalPoint %}
        {% set cell1 %}
          {% if asset.kind == 'image' %}
            <a href="{{ asset.cpEditUrl }}" style="display: block; max-width: 300px" title="Edit image">{{ craft.guide.component('image', { url: asset.url }) }}</a>
          {% endif %}
        {% endset %}
        {% set cell2 %}<a href="{{ asset.cpEditUrl }}">{{ asset.title }}</a>{% endset %}
        {% set cell3 %}{{ asset.filename }}{% endset %}
        {% set row = [cell1, cell2, cell3] %}
        {% set rows = rows|merge([row]) %}
      {% endif %}
    {% endfor %}

    {{ craft.guide.component('table', {
      headers: ['Preview', 'Title', 'File name'],
      rows,
    }) }}
  {% endif %}
{% endcache %}{% endverbatim %}{% endset %}
{% set snippets = snippets|merge([{
  title: 'Images Missing Focal Points'|t('guide'),
  contentCode,
  group: 'snippets',
  summary: '<p>Find images that are missing focal points.</p>'|t('guide'),
}]) %}

{% set contentCode %}{% verbatim %}{# Set the asset volume you would like to check for images in. #}
{% set volume = null %}

{# Set file types that should assets should be uplaoded as. #}
{% set acceptedExtensions = ['jpg', 'jpeg'] %}

{# Display a list of invalid assets and instruct authors on what extension is required. #}
{% cache %}
  {% set assets = craft.assets.volume(volume ?? null).all() %}

  {% if assets|length %}
{% apply markdown('gfm') %}

These assets should be replaced with files using the extension: **{{ acceptedExtensions|join(', ') }}**

{% endapply %}
    {% set rows = [] %}

    {% for asset in assets %}
      {% if asset.extension|lower not in acceptedExtensions %}
        {% set cell1 %}
          {% if asset.kind == 'image' %}
            <a href="{{ asset.cpEditUrl }}" style="display: block; max-width: 300px" title="Edit image">{{ craft.guide.component('image', { url: asset.url }) }}</a>
          {% endif %}
        {% endset %}
        {% set cell2 %}<a href="{{ asset.cpEditUrl }}">{{ asset.title }}</a>{% endset %}
        {% set cell3 %}{{ asset.filename }}{% endset %}
        {% set row = [cell1, cell2, cell3] %}
        {% set rows = rows|merge([row]) %}
      {% endif %}
    {% endfor %}

    {{ craft.guide.component('table', {
      headers: ['Preview', 'Title', 'File name'],
      rows,
    }) }}
  {% endif %}
{% endcache %}{% endverbatim %}{% endset %}
{% set snippets = snippets|merge([{
  title: 'Incorrect File Type'|t('guide'),
  contentCode,
  group: 'snippets',
  summary: '<p>Find assets that have the wrong file type for a given volume.</p>'|t('guide'),
}]) %}

{% set contentCode %}{% verbatim %}{# Set the fields handle. #}
{% set handle = 'REPLACE_HANDLE' %}

{# Set the field label for this guide. #}
{% set label = 'REPLACE_LABEL' %}

{# Set this to "true" to find elements with the field filled out, or "false" to find elements that are missing this field. #}
{% set filledOut = true %}

{# Import _self to use macro below #}
{% import _self as self %}

{# Start Snippet Display #}
{% cache %}
<div>
  <h2>{{ label }}</h2>
  {% set elements = craft.entries({
    (handle): filledOut ? ':notempty:' : ':empty:',
  }).all() %}

  {% set rows = [] %}
  {% for row in elements %}
    {% set cell1 %}<a href="{{ row.url }}" target="_blank" rel="nofollow noopener" title="View elements page in a new window.">{{ row.title }}</a>{% endset %}
    {% set cell2 %}<a class="btn icon edit" href="{{ row.cpEditUrl }}" target="_blank" rel="nofollow noopener" title="Go to element edit page.">Edit</a>{% endset %}
    {% set row = [cell1, cell2] %}
    {% set rows = rows|merge([row]) %}
  {% endfor %}

  {# Display table #}
  {{ craft.guide.component('table', {
    headers: ['Entries that ' ~ (filledOut ? 'include' : 'are missing') ~ ' the ' ~ label ~ ' field', 'Edit Page'],
    rows,
  }) }}
</div>
{% endcache %}{% endverbatim %}{% endset %}
{% set snippets = snippets|merge([{
  title: 'Filled-Out Fields'|t('guide'),
  contentCode,
  group: 'snippets',
  summary: '<p>Find elements where a field is either filled out or empty.</p>'|t('guide'),
}]) %}


{# Render list items #}
{% if group == 'components' %}
  {% set listItems = components %}
{% elseif group == 'guides' %}
  {% set listItems = guides %}
{% elseif group == 'images' %}
  {% set listItems = images %}
{% elseif group == 'snippets' %}
  {% set listItems = snippets %}
{% endif %}

{% set tMessages = {
  'addContent': 'Content'|t('guide'),
  'addCss': 'CSS'|t('guide'),
  'addJavascript': 'JS'|t('guide'),
  'variables': 'Variables'|t('guide'),
} %}

{% if listItems|length %}
  <ul id="editor-component-list-{{ group }}">
    {% for item in listItems %}
      <li>
        <guide-editor-component-list-item component-data="{{ item|json_encode }}" t-messages="{{ tMessages|json_encode }}"></guide-editor-component-list-item>
      </li>
    {% endfor %}
  </ul>
{% endif %}
